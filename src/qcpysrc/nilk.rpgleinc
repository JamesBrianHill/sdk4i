**FREE
// -------------------------------------------------------------------------------------------------
//   Define constants, variables, and procedures related to the NIL component.
//
// @copyright Copyright (c) 2015 - 2025 by James Brian Hill
// @license GNU General Public License version 3
// @link https://www.gnu.org/licenses/gpl-3.0.html
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
//   This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License along with this program. If
// not, see https://www.gnu.org/licenses/gpl-3.0.html
// -------------------------------------------------------------------------------------------------

/IF DEFINED(NILK)
/EOF
/ENDIF
/DEFINE NILK

// -------------------------------------------------------------------------------------------------
// Bring in the copybooks we will use.
//
// TEMPLATESK - template variables used throughout our software.
// -------------------------------------------------------------------------------------------------
/COPY './templatesk.rpgleinc'

// -------------------------------------------------------------------------------------------------
// Pull in column definitions.
// -------------------------------------------------------------------------------------------------

// -------------------------------------------------------------------------------------------------
// Define global constants, template data structures and template variables.
// -------------------------------------------------------------------------------------------------
DCL-DS tpl_sdk4i_nil_indicator_array_ds QUALIFIED TEMPLATE;
  indicator_string CHAR(C_SDK4I_SIZE_1KI) INZ('0');
  indicator_array IND DIM(C_SDK4I_SIZE_1KI) OVERLAY(indicator_string);
END-DS tpl_sdk4i_nil_indicator_array_ds;

DCL-DS tpl_sdk4i_nil_int_array_ds QUALIFIED TEMPLATE;
  int_array LIKE(tpl_sdk4i_nil_null_int) DIM(C_SDK4I_SIZE_1KI);
END-DS tpl_sdk4i_nil_int_array_ds;

DCL-S tpl_sdk4i_nil_array_count PACKED(4:0) INZ(C_SDK4I_SIZE_1KI) TEMPLATE;
DCL-S tpl_sdk4i_nil_null_int INT(5);

// -------------------------------------------------------------------------------------------------
///
// Convert an IND into an INT(5).
//
// This procedure can be used to convert an RPG indicator variable to a 2-byte integer usable with
// embedded SQL.
//
// @param REQUIRED. This is an IND value that indicates if a field is NULL or not.
//
// @return -1 if i_ind = *ON, 0 otherwise.
///
// -------------------------------------------------------------------------------------------------
DCL-PR NIL_IndToInt LIKE(tpl_sdk4i_nil_null_int) EXTPROC(*DCLCASE);
  i_ind IND CONST;
END-PR NIL_IndToInt;

// -------------------------------------------------------------------------------------------------
///
// Convert an INT(5) into an IND.
//
// This procedure can be used to convert a 2-byte integer used by embedded SQL to indicate NULL to
// an RPG indicator variable.
//
// @param REQUIRED. This is an INT(5) value that indicates if a field is NULL or not.
//
// @return *ON if i_int < 0 (indicating NULL), *OFF otherwise.
///
// -------------------------------------------------------------------------------------------------
DCL-PR NIL_IntToInd IND EXTPROC(*DCLCASE);
  i_int LIKE(tpl_sdk4i_nil_null_int) CONST;
END-PR NIL_IntToInd;

// -------------------------------------------------------------------------------------------------
///
// Convert an array of INT(5) to an array of IND.
//
// When using embedded SQL and fetching multiple rows, we use an array of INT(5) values to capture
// NULL values. This procedure will take an array of INT(5) values and return an array of IND values
// that can be used easily by RPG.
//
// @param REQUIRED. The number of values that need to be processed.
// @param REQUIRED. An array of INT(5) values, probably from a FETCH statement.
// @param REQUIRED. An array of IND values, probably associated to a data structure like this:
//   DCL-DS my_ds QUALIFIED NULLIND(my_ind_ds); Note that this procedure will set all of the
//   indicators in this array to *OFF before doing any processing.
//
// @return *ON if the procedure was successful, *OFF otherwise.
///
// -------------------------------------------------------------------------------------------------
DCL-PR NIL_IntArrayToIndArray EXTPROC(*DCLCASE);
  i_int_array_size LIKE(tpl_sdk4i_nil_array_count) CONST;
  i_int_array_ds LIKEDS(tpl_sdk4i_nil_int_array_ds) CONST OPTIONS(*EXACT);
  o_indicator_array_ds LIKEDS(tpl_sdk4i_nil_indicator_array_ds) OPTIONS(*EXACT);
END-PR NIL_IntArrayToIndArray;
